#!/bin/bash
#

###########################################################
#                   Mining Scheduler                      #
#                Written by cl@xganon.com                 #
#                Copywrite 2020 GPL-V3                    #
# ETH ADDRESS: 0xC076342F3E915fb5A2672DC3CF519a1C6399010c #
###########################################################

#
# load configuration
#

. /opt/mining-scheduler/scheduler.cfg

cd $MHOME



#
# Display Usage
#
usage(){
    echo '
        This script takes an option:
        -b             # used when booting up or when you want to restart the miner
        -s <miner>     # starts a given miner
        -r             # rotates to the next miner
        -c             # clears the system run and pid files
        -q             # Quit/stop running miner
        -u 1/0         # User Halt 1=on Stops miner and blocks it from starting at boot. 0=off
        -h             # This help file
        Usage: mining-scheduler <OPTION>
    '
        exit
}

#
# Load miner.cfg
#

IFS=$'\n' GLOBIGNORE='*' command eval  'MINERS=($(grep -v ^# $MHOME/miners.cfg))'

#
# Set Miner Var's for the script
#
function set_miner_var {
          MNAME=`echo ${MINERS[$1]} | cut -d: -f1`
          MINERDIR=`echo ${MINERS[$1]} | cut -d: -f2`
          MINERSTAT=`echo ${MINERS[$1]} | cut -d: -f3`
          MCMD=`echo ${MINERS[$1]} | cut -d: -f4-`
}

#
# Parse miners.cfg 
#
function load_minercfg() {
    for (( c=0; c<=${#MINERS[@]}-1; c++ ))
    do
#
# Return first miner
#
      if [[ $1 = "first" ]] && [[ $c = 0 ]]; then 
        echo "First"
        set_miner_var $c;
        return
      fi
#
# Rotate miner
#
      let "q = ${#MINERS[@]} - 1"
      if [[ $1 = "rotate" ]] && [[ ! $c = $q ]] && [[ ${MINERS[${c}]} =~ ^"${ACTIVE}" ]]; then        
          let "c = $c + 1"
          set_miner_var $c
          return
       fi
       if [[ $1 = "rotate" ]] && [[ $c = $q ]] &&  [[ ${MINERS[${c}]} =~ ^"${ACTIVE}" ]]; then
          set_miner_var 0
          return
      fi
#
#  Find miner by name
#
      if [[ "${MINERS[${c}]}" =~ ^"${1}:" ]]; then         
        set_miner_var $c
      return
      fi
    done
    echo "No miner found with name $1"
    exit 5
}


#
# Start miner function 
#
function start_miner(){
  MINER=$1
  if [ -f $MHOME/run/HALT ]; then echo "Halted by user"; exit 0; fi
  if [ -f $MHOME/pid/pid ]; then
     echo "A miner is currently running please use the -q option to stop it before trying to start a new miner."
     exit 5
  fi
      load_minercfg $MINER 
      echo "Starting"
      echo "Miner Name: $MNAME"
      echo "Miner Command: $MCMD"
      echo "$MNAME" > $MHOME/run/miner
          if [[ ! $MINERDIR =~ ^/. ]]; then
             MINERDIR=$MHOME/$MINERDIR
          fi
          cd $MINERDIR
          nohup $MCMD >> $MHOME/logs/$MNAME.log & echo $! > ${MHOME}/pid/pid
          exit 0
 echo "Miner not found in config"
 exit 5
}

function stop_miner(){
  if [ -f $MHOME/pid/pid ]; then
    MINER=`cat $MHOME/run/miner | head -1`
    PID=`cat $MHOME/pid/pid`
    echo "Stopping "${MINER}
    kill ${PID}
    if [ -f $MHOME/pid/pid ]; then
       rm $MHOME/pid/pid
    fi
  else
   echo "No PID File found. If a miner is running please kill it first"
   exit 5
  fi
}

#
# Rotate miner
#
function rotate() {
   if [ -f $MHOME/run/HALT ]; then echo "Halted by user"; exit 0; fi
   if [ -f "$MHOME/run/miner" ]; then
     ACTIVE=`cat $MHOME/run/miner`
   else
     echo "No Run File Found"
     exit 5;
   fi
         stop_miner
         sleep 10
         load_minercfg rotate
         echo "Miner : $MNAME"
         start_miner $MNAME
         exit 0
 echo "Miner not found in config"
 exit 5
}

  #
  #  Bootup 
  #
  function boot(){
    if [ -f "${MHOME}/run/miner" ]; then
      ACTIVE=`cat ${MHOME}/run/miner`
      if [ -f "${MHOME}/pid/pid" ]; then
       MPID=`cat ${MHOME}/pid/pid`
       if ps --pid ${MPID} > /dev/null
       then
         echo "Miner is currently running"
         exit 5
       else
         if [ -f ${MHOME}/pid/pid ]; then
            rm ${MHOME}/pid/pid
         fi
       fi
     fi
         start_miner $ACTIVE
    else
      echo "No Run File Found, starting first miner"
          load_minercfg first
          start_miner $MNAME
          exit 0;
   fi 
}


#
# Clear
#
function clear() {
        if [ -f "$MHOME/pid/pid" ]; then
           MPID=`cat $MHOME/pid/pid`
           if ps --pid ${MPID} > /dev/null
           then
             echo "A Miner is currently running. Run \"mining-scheduler -q\" first"
             exit 5
           else
             rm $MHOME/pid/pid
           fi
        fi
        if [ -f $MHOME/run/miner ]; then
           rm $MHOME/run/miner
        fi
}
#
# Get Options
#
while getopts [bs:rchq] options
do
  case $options in
    b ) echo "Boot" 
        boot
        exit 0
        ;;
    s ) start_miner $OPTARG
        ;;
    r ) echo "Rotate"
        rotate
        ;;
    c ) echo "Clear"
        clear
        exit 0
        ;;
    q ) stop_miner
        exit 0
        ;;
    u ) if [ $OPTARG == 1 ]; then
         touch $MHOME/run/HALT
         stop_miner
         exit 0
        fi
        if [ $OPTARG == 0 ]; then
         if [ -f $MHOME/run/HALT ]; then rm run/HALT; fi
         boot
         exit 0;
        fi
        echo "Unknown option $OPTARG"
        exit 5
        ;;
    h ) usage
         exit 1;;
    \? ) usage
         exit 1;;
    * ) usage
          exit 1;;
  esac
done
usage
exit 1
