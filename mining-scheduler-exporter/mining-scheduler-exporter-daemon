#!/usr/bin/perl

use strict;
use warnings;
use Proc::PID::File;
use Log::Dispatch;
use Log::Dispatch::File;
use File::Glob ();
use Date::Format;
use File::Spec;
use JSON;
use LWP::Simple;
my $GPUS=0;
my $file;
my $mining;
my $pluginname;

use constant {
         HOME       => '/opt/mining-scheduler',
         LOG_DIR    => '/logs',
         LOG_FILE   => 'mining-scheduler-exporter.log',
         PIDDIR     => '/pid',
};
my $pid;
my $keep_going = 1;

sub die_nice ($);
our $ME = $0; $ME =~ s|.*/||;
our $PIDDIR = HOME.PIDDIR;
our $PIDFILE = "$ME";

#
# Setup a logging agent
#
our $HOSTNAME = `hostname`;
chomp $HOSTNAME;
my $log = new Log::Dispatch(
      callbacks => sub { my %h=@_; return Date::Format::time2str('%B %e %T', time)." ".$HOSTNAME." $0\[$$]: ".$h{message}."\n"; }
);
$log->add( Log::Dispatch::File->new( name      => 'file1',
                                     min_level => 'warning',
                                     mode      => 'append',
                                     filename  => File::Spec->catfile(HOME.LOG_DIR, LOG_FILE),
                                   )
);
$log->warning("Starting Processing:  ".time());

#
# Setup signal handlers so that we have time to cleanup before shutting down
#
$SIG{HUP}  = sub { $log->warning("Caught SIGHUP:  exiting gracefully"); $keep_going = 0};
$SIG{INT}  = sub { $log->warning("Caught SIGINT:  exiting gracefully"); $keep_going = 0};
$SIG{QUIT} = sub { $log->warning("Caught SIGQUIT:  exiting gracefully"); $keep_going = 0};
#$SIG{TERM} = sub { $log->warning("Caught SIGTERM:  exiting gracefully"); $keep_going = 0};
startDaemon();
#
# enter main loop
#
while ($keep_going) {
        sleep 5;
	#
	#Pull what we are mining
	#

	open $file, '<', HOME."/run/miner" || die "Couldn't open $file: $!";
	$mining = <$file>;
	chomp($mining);
	close $file;

	#
	# Load mining-scheduler miners.cfg to find the miner plugin
	#
	open $file, "<", HOME."/miners.cfg" || die "Couldn't open $file: $!";
	while (<$file>) {
		if ( $_ =~ /^$mining/ ) {
		my @val = split(":", $_);
		$pluginname=$val[2];
	}
	}
	close $file;

	#
	# load the plugins and select the correct one
	#
	my $plugin=HOME."/node_exporter/plugins/$pluginname.pm";
	require $plugin;
	
	
	my ($pool, $user, $miner, $total_watts, $total_hashrate, $total_shares_accepted, $total_shares_submitted, $gpu_temp, $gpu_fanspeed, $gpu_watts, $gpu_hashrate, $gpu_shares_accepted, $gpu_shares_submitted)=$pluginname->mstats();
	  #
	  # Output Stats
	  #
	  open my $output, ">", "/var/lib/prometheus/node-exporter/miner.prom" || die "Couldn't open $file: $!";
	  print $output "mining_scheduler{pool=\"$pool\",user=\"$user\",mining=\"$mining\",miner=\"$miner\"} 1\n";
	  print $output "mining_scheduler_total_watts{mining=\"$mining\",miner=\"$miner\"} $total_watts\n";
	  print $output "mining_scheduler_total_hashrate{mining=\"$mining\",miner=\"$miner\"} $total_hashrate\n";
	  print $output "mining_scheduler_total_shares_accepted{mining=\"$mining\",miner=\"$miner\"} $total_shares_accepted\n";
	  print $output "mining_scheduler_total_shares_submitted{mining=\"$mining\",miner=\"$miner\"} $total_shares_submitted\n";
	  close $output;
	  #
	  #Pull GPU Data and output
	  #
	  $GPUS = @$gpu_temp;
	  for (my $i = 0; $i <= $GPUS-1; $i++){
        	  open my $output, ">>", "/var/lib/prometheus/node-exporter/miner.prom" || die "Couldn't open $file: $!";
	          print $output "mining_scheduler_gpu_temp{gpu=\"$i\",mining=\"$mining\",miner=\"$miner\"} @$gpu_temp[$i]\n";
	          print $output "mining_scheduler_gpu_fanspeed{gpu=\"$i\",mining=\"$mining\",miner=\"$miner\"} @$gpu_fanspeed[$i]\n";
	          print $output "mining_scheduler_gpu_watts{gpu=\"$i\",mining=\"$mining\",miner=\"$miner\"} @$gpu_watts[$i]\n";
	          print $output "mining_scheduler_gpu_hashrate{gpu=\"$i\",mining=\"$mining\",miner=\"$miner\"} @$gpu_hashrate[$i]\n";
        	  print $output "mining_scheduler_gpu_shares_accepted{gpu=\"$i\",mining=\"$mining\",miner=\"$miner\"} @$gpu_shares_accepted[$i]\n";
	          print $output "mining_scheduler_gpu_shares_submitted{gpu=\"$i\",mining=\"$mining\",miner=\"$miner\"} @$gpu_shares_submitted[$i]\n";
	close $output;
	 }
     	}

	#
	# Mark a clean exit in the log
	#
	$log->warning("Stopping Processing:  ".time());
	my $pidtmp = $PIDDIR."/".$PIDFILE.".pid";
	exec("rm $pidtmp") || $log->warning("Unable to remove PID file:  ".time());
	exit 0;

#
# startDaemon
#
#
sub startDaemon {
  #
  # Get a PID file
  #
  $pid = Proc::PID::File->new(verify => 1, dir => $PIDDIR, name => $PIDFILE);
}

#
# die_nice
#
# write die messages to the log before die'ing
#
sub die_nice ($) {
  my ($package, $filename, $line) = caller;
  $log->critical("$_[0] at line $line in $filename");
  die $_[0];
}

